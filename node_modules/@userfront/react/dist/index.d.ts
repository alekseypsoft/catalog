import * as _userfront_core from '@userfront/core';
import * as React from 'react';
import Userfront from '@userfront/toolkit/react';

/**
 * React wrappers for Userfront toolkit components
 */

interface ToolkitProps {
    compact?: boolean;
}
/**
 * Signup Form
 */
type SignupFormProps = ToolkitProps;
declare const SignupForm: React.ForwardRefExoticComponent<ToolkitProps & React.RefAttributes<unknown>>;
/**
 * Login Form
 */
type LoginFormProps = ToolkitProps;
declare const LoginForm: React.ForwardRefExoticComponent<ToolkitProps & React.RefAttributes<unknown>>;
/**
 * Password Reset Form
 */
type PasswordResetFormProps = ToolkitProps;
declare const PasswordResetForm: React.ForwardRefExoticComponent<ToolkitProps & React.RefAttributes<unknown>>;
/**
 * Password Reset Form
 */
type LogoutButtonProps = ToolkitProps;
declare const LogoutButton: React.ForwardRefExoticComponent<ToolkitProps & React.RefAttributes<unknown>>;

interface UserfrontOptions {
    /**
     * Tenant ID from Userfront (**required**)
     */
    tenantId: string;
    /**
     * Loading skeleton component
     */
    skeleton?: React.ReactNode | null;
    /**
     * Redirect URL for unauthenticated visitors that need to login
     * @default "/login"
     */
    loginUrl?: string;
    /**
     * Redirect URL after login, set to `false` to disable.
     * When `undefined`, use the path configured to the workspace
     * [paths & routing settings](https://userfront.com/dashboard/paths)
     */
    loginRedirect?: string | boolean;
    /**
     * Redirect URL after signup, set to `false` to disable.
     * When `undefined`, use the path configured to the workspace
     * [paths & routing settings](https://userfront.com/dashboard/paths)
     */
    signupRedirect?: string | boolean;
    /**
     * Redirect URL after logout, set to `false` to disable.
     * When `undefined`, use the path configured to the workspace
     * [paths & routing settings](https://userfront.com/dashboard/paths)
     */
    logoutRedirect?: string | boolean;
    /**
     * Require authentication - unauthorized will redirect to `loginUrl` and authorized users will be redirected to `loginRedirect`
     * @default true
     */
    requireAuth?: boolean;
    /**
     * Base URL for the Userfront API
     * If not set defaults to "https://api.userfront.com/v0/"
     */
    baseUrl?: string;
}
declare function useUserfront({ tenantId, skeleton, loginUrl, loginRedirect, signupRedirect, logoutRedirect, requireAuth, baseUrl, }: UserfrontOptions): {
    init: typeof Userfront.init;
    addInitCallback: typeof Userfront.addInitCallback;
    signup: typeof Userfront.signup;
    login: typeof Userfront.login;
    logout: typeof Userfront.logout;
    getSession: typeof Userfront.getSession;
    redirectIfLoggedIn: typeof Userfront.redirectIfLoggedIn;
    redirectIfLoggedOut: typeof Userfront.redirectIfLoggedOut;
    updatePassword: typeof Userfront.updatePassword;
    resetPassword: typeof Userfront.resetPassword;
    sendLoginLink: typeof Userfront.sendLoginLink;
    sendResetLink: typeof Userfront.sendResetLink;
    sendVerificationCode: typeof Userfront.sendVerificationCode;
    user: Userfront.User;
    tokens: Userfront.Tokens;
    mode: Userfront.Mode;
    tenantId: string;
    isAuthenticated: boolean;
    isLoading: boolean;
    skeleton: string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | Iterable<React.ReactNode> | React.ReactPortal | null;
    loginUrl: string;
    loginRedirect: string | boolean | undefined;
    signupRedirect: string | boolean | undefined;
    logoutRedirect: string | boolean | undefined;
    requireAuth: boolean;
};

type UserfrontHookArgs = Parameters<typeof useUserfront>[0];
type UserfrontContextType = ReturnType<typeof useUserfront>;
interface UserfrontProviderProps extends UserfrontHookArgs {
    children?: React.ReactNode;
}
declare function UserfrontProvider({ children, ...props }: UserfrontProviderProps): React.JSX.Element;
declare function useUserfrontContext(): {
    init: typeof _userfront_core.init;
    addInitCallback: typeof _userfront_core.addInitCallback;
    signup: typeof _userfront_core.signup;
    login: typeof _userfront_core.login;
    logout: typeof _userfront_core.logout;
    getSession: typeof _userfront_core.getSession;
    redirectIfLoggedIn: typeof _userfront_core.redirectIfLoggedIn;
    redirectIfLoggedOut: typeof _userfront_core.redirectIfLoggedOut;
    updatePassword: typeof _userfront_core.updatePassword;
    resetPassword: typeof _userfront_core.resetPassword;
    sendLoginLink: typeof _userfront_core.sendLoginLink;
    sendResetLink: typeof _userfront_core.sendResetLink;
    sendVerificationCode: typeof _userfront_core.sendVerificationCode;
    user: _userfront_core.User;
    tokens: _userfront_core.Tokens;
    mode: _userfront_core.Mode;
    tenantId: string;
    isAuthenticated: boolean;
    isLoading: boolean;
    skeleton: string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | Iterable<React.ReactNode> | React.ReactPortal | null;
    loginUrl: string;
    loginRedirect: string | boolean | undefined;
    signupRedirect: string | boolean | undefined;
    logoutRedirect: string | boolean | undefined;
    requireAuth: boolean;
};

export { LoginForm, type LoginFormProps, LogoutButton, type LogoutButtonProps, PasswordResetForm, type PasswordResetFormProps, SignupForm, type SignupFormProps, type ToolkitProps, type UserfrontContextType, UserfrontProvider, type UserfrontProviderProps, useUserfrontContext as useUserfront };
